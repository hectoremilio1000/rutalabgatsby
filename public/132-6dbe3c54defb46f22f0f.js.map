{"version":3,"sources":["webpack://rutalab/./node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-form-field_4.entry.js"],"names":["AmplifyFormField","hostRef","r","this","type","required","placeholder","prototype","render","h","class","label","htmlFor","fieldId","description","id","name","handleInputChange","value","inputProps","disabled","hint","style","AmplifyHint","AmplifyInput","autoCompleted","setAutoCompleteValue","input","el","querySelector","dispatchEvent","Event","checkAutoCompletion","targetInput","_this","addEventListener","e","target","disconnectedCallback","removeHubListener","componentWillLoad","o","componentDidLoad","test","navigator","userAgent","container","signIn","username","password","H","Object","assign","onInput","event","defineProperty","get","g","enumerable","configurable","AmplifyLabel"],"mappings":"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","file":"132-6dbe3c54defb46f22f0f.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\nimport '@aws-amplify/core';\nimport './auth-types-78df304e.js';\nimport '@aws-amplify/auth';\nimport './Translations-c833f663.js';\nimport './constants-d1abe7de.js';\nimport { e as closestElement, o as onAuthUIStateChange } from './helpers-82822fb2.js';\nvar amplifyFormFieldCss = \"amplify-form-field{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\n\nvar AmplifyFormField =\n/** @class */\nfunction () {\n  function AmplifyFormField(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The required flag in order to make an input required prior to submitting a form */\n\n    this.required = false;\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n    this.placeholder = '';\n  }\n\n  AmplifyFormField.prototype.render = function () {\n    return h(\"div\", {\n      class: \"form-field\"\n    }, this.label && h(\"div\", {\n      class: \"form-field-label\"\n    }, h(\"amplify-label\", {\n      htmlFor: this.fieldId\n    }, this.label)), this.description && h(\"div\", {\n      id: this.fieldId + \"-description\",\n      class: \"form-field-description\",\n      \"data-test\": \"form-field-description\"\n    }, this.description), h(\"div\", null, h(\"slot\", {\n      name: \"input\"\n    }, h(\"amplify-input\", {\n      fieldId: this.fieldId,\n      description: this.description,\n      type: this.type,\n      handleInputChange: this.handleInputChange,\n      placeholder: this.placeholder,\n      name: this.name,\n      value: this.value,\n      inputProps: this.inputProps,\n      disabled: this.disabled\n    }))), this.hint && h(\"amplify-hint\", {\n      id: this.fieldId + \"-hint\"\n    }, this.hint));\n  };\n\n  return AmplifyFormField;\n}();\n\nAmplifyFormField.style = amplifyFormFieldCss;\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\n\nvar AmplifyHint =\n/** @class */\nfunction () {\n  function AmplifyHint(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyHint.prototype.render = function () {\n    return h(\"div\", {\n      class: \"hint\"\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyHint;\n}();\n\nAmplifyHint.style = amplifyHintCss;\nvar amplifyInputCss = \"amplify-input{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}[data-autocompleted]{background-color:#e8f0fe !important}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1;-webkit-box-shadow:none;box-shadow:none}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\n\nvar AmplifyInput =\n/** @class */\nfunction () {\n  function AmplifyInput(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The callback, called when the input is modified by the user. */\n\n    this.handleInputChange = function () {\n      return void 0;\n    };\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n\n    this.placeholder = '';\n    /** Whether the input has been autocompleted */\n\n    this.autoCompleted = false;\n  }\n  /**\n   * Sets the value of this input to the value in autofill input event.\n   */\n\n\n  AmplifyInput.prototype.setAutoCompleteValue = function (value) {\n    var input = this.el.querySelector('input');\n    if (!input) return;\n    input.value = value; // dispatch an input event from this element to the parent form\n\n    input.dispatchEvent(new Event('input'));\n    this.autoCompleted = true;\n  };\n  /**\n   * Checks if the target dummy input in `amplify-auth-container` is present have been autofilled.\n   * If so, we update this.value with the autofilled value.\n   */\n\n\n  AmplifyInput.prototype.checkAutoCompletion = function (targetInput) {\n    var _this = this;\n\n    if (!targetInput) return;\n\n    if (targetInput.value) {\n      // if value is already set, we set the value directly\n      this.setAutoCompleteValue(targetInput.value);\n    } else {\n      // if value is not set, we start listening for it\n      targetInput.addEventListener('input', function (e) {\n        var value = e.target.value;\n\n        _this.setAutoCompleteValue(value);\n      });\n    }\n  };\n\n  AmplifyInput.prototype.disconnectedCallback = function () {\n    this.removeHubListener && this.removeHubListener(); // stop listening to `onAuthUIStateChange`\n  };\n\n  AmplifyInput.prototype.componentWillLoad = function () {\n    var _this = this; // the below behaviors are only applicable if `amplify-input` is used by `amplify-authenticator`.\n\n\n    if (!closestElement('amplify-authenticator', this.el)) return;\n    this.removeHubListener = onAuthUIStateChange(function () {\n      /**\n       *Â When we're using slots, autofilled data will persist between different authState,\n       * even though input events are not triggered. This ends up in parent components\n       * not picking up input values. For now, we're emptying the input on authState change\n       * which is the existing behavior.\n       */\n      var input = _this.el.querySelector('input');\n\n      if (input) input.value = '';\n      _this.autoCompleted = false;\n    });\n  };\n\n  AmplifyInput.prototype.componentDidLoad = function () {\n    // no-op if this field already has been autofilled or already has an value\n    if (this.autoCompleted || this.value) return;\n    if (/Firefox/.test(navigator.userAgent)) return; // firefox autofill works\n\n    var container = closestElement('amplify-auth-container', this.el);\n    var signIn = closestElement('amplify-sign-in', this.el); // only autocomplete if `amplify-auth-container` is present and input is under `sign-in`.\n\n    if (!container || !signIn) return;\n    var username = container.querySelector(\"input[name='username']\");\n    var password = container.querySelector(\"input[name='password']\");\n\n    if (this.name === 'username' || this.name === 'email' || this.name === 'phone') {\n      this.checkAutoCompletion(username);\n    } else if (this.name === 'password') {\n      this.checkAutoCompletion(password);\n    }\n  };\n\n  AmplifyInput.prototype.render = function () {\n    var _this = this;\n\n    return h(Host, {\n      class: \"input-host\"\n    }, h(\"input\", Object.assign({\n      id: this.fieldId,\n      \"aria-describedby\": this.fieldId && this.description ? this.fieldId + \"-description\" : null,\n      \"data-autocompleted\": this.autoCompleted,\n      type: this.type,\n      onInput: function onInput(event) {\n        _this.autoCompleted = false;\n\n        _this.handleInputChange(event);\n      },\n      placeholder: this.placeholder,\n      name: this.name,\n      class: \"input\",\n      value: this.value,\n      disabled: this.disabled\n    }, this.inputProps)));\n  };\n\n  Object.defineProperty(AmplifyInput.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AmplifyInput;\n}();\n\nAmplifyInput.style = amplifyInputCss;\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\n\nvar AmplifyLabel =\n/** @class */\nfunction () {\n  function AmplifyLabel(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyLabel.prototype.render = function () {\n    return h(\"label\", {\n      class: \"label\",\n      htmlFor: this.htmlFor\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyLabel;\n}();\n\nAmplifyLabel.style = amplifyLabelCss;\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };"],"sourceRoot":""}